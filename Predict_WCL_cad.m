function [Y,Xf,Af] = Predict_WCL_cad(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Jul-2017 15:11:39.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [240;0;0.563000023;0];
x1_step1.gain = [0.0116959064327485;0.0892857158003827;0.342289912883613;0.05];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.3852661398269754;1.9964010743523153;1.5492294288441713;-1.0950142663216949;-0.073223854315033698;-1.3538991869277066;0.4603759220773187;0.42919494031433925;0.56754479634647759;-3.2334713835280295];
IW1_1 = [-0.79962555363802512 -1.2429001415393808 -1.9821819365654367 0.79434583948329629;-0.51001502604009108 1.4948207273170135 1.8876645359913575 0.97656845110239265;-0.40995467286151904 1.1363984448140589 1.5405475264422155 0.80984900216923705;2.1858331107355458 1.1000082705030902 1.6089026020406294 -0.34051590871341719;-0.66118582644674162 0.23219707669775971 0.022776282436327813 0.017874006569997426;-3.4671541552042635 -0.97945864163006746 -0.78887828953381856 -0.053397832609983396;1.4986317124641761 1.9266561467738215 -1.2074527269183597 1.6760786624209598;0.54427317485225957 0.74580171788181715 -0.50412905625783921 -0.22558663231189571;0.45659232801844718 0.36205754382417671 -0.68640266937474148 0.87266620551745522;0.044905935185664214 0.57870645553913291 -0.7744353712712464 1.7827406868330957];

% Layer 2
b2 = 0.52398722638579731;
LW2_1 = [0.21060683489599644 -0.80114307083363223 1.1097538985715565 0.1899673006909525 -1.1608226964383943 -0.050925496426977537 0.040693662922323501 0.30019413870260553 0.19390843485419523 0.72253812455699384];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0116959064327485;
y1_step1.xoffset = 240;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
