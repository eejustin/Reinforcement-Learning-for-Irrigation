function [Y,Xf,Af] = Predict_Irrigation_cad(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Jul-2017 15:18:25.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [240;240;0;0.563000023];
x1_step1.gain = [0.0116959064327485;0.0116959064327485;0.0892857158003827;0.342289912883613];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.4086886026236207;3.6443148895186006;0.68515448286903524;1.8802144604621076;6.550588863360816;-0.85457016612534009;-2.6383896231708786;-6.8880168845817513;-3.545452202393697;-1.8399914997265505];
IW1_1 = [1.528521838852958 1.1850834629719684 -0.4278706673693437 -1.7650372829950154;6.8401431235964312 -6.9998005872969848 1.2672522894532205 -0.47161374285440588;-3.8143370663878828 3.6584249204537374 1.4319971252518049 0.51943582452568671;3.1453358133725207 -0.88348683838919395 1.9067252463931099 -1.0392686654019272;35.595812374211761 -35.307676609977399 6.6694927829521609 -1.0953654776008175;1.8120038587719032 -1.6660977825425978 -1.7376291465467499 -0.49340978830563981;-9.5309451530898439 9.533454767343633 -1.5128996306035685 0.21107557155104442;-37.594039949584996 37.296419160229263 -7.0074918341705201 1.1756747485124242;-6.4027706257206471 6.6367717350764037 -1.2218107789124646 0.5943622661071718;-2.7657346204433826 0.49715735340638406 -1.843910934667871 1.0340485963681776];

% Layer 2
b2 = 0.17063725897874377;
LW2_1 = [0.0024921186108406747 -2.5815310464642822 -0.40553636380742314 -0.74298645600348046 2.4425793702326621 -0.40699197761853506 0.4864189444895165 2.6274101212606746 -2.0658799527041154 -0.73741130267147137];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.05;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
