function [Y,Xf,Af] = Predict_Irrigation_ind(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Jul-2017 17:16:59.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [531;531;0;0.138999999];
x1_step1.gain = [0.00975609756097561;0.00975609756097561;0.0757575768480257;0.411437975640519];
x1_step1.ymin = -1;

% Layer 1
b1 = [-7.6061021284756487;0.86208079013233119;-4.3822375498544917;0.94784453521781475;-0.62191036522748111;2.2740554713003469;-1.2406135905086211;4.8481636415616904;5.0414830077583055;-1.0334018090321928];
IW1_1 = [6.2413342514264016 -4.3761899353228788 4.2524444297070998 -3.0361245805454833;13.986722461847263 -14.064103388157317 1.5275833289226139 -0.12996713902320062;-3.501117032446929 3.4916211377189974 -3.4015955869794787 -0.57984383428135744;4.0214339069192757 -3.9748564813663179 1.9874236580678273 0.57695017819121253;8.5562716384162378 -8.5062892172674935 2.4316022879313555 0.62029559978173998;4.7124373385670415 -5.9477238316708156 -0.87818611039419037 -4.2035289488111589;-17.385204031888943 17.475187717505499 -2.0368245594025352 0.12496350517400569;15.086129949892833 -15.907208615676945 1.5293313195848321 1.3386512191084798;10.346905532632752 -3.8382639957516154 -3.2733949828095237 2.3429531645967185;-2.6583793583416293 2.6614234362482296 -0.032461344496269064 0.16385785592936661];

% Layer 2
b2 = -1.3536068335278613;
LW2_1 = [-0.92637576200062688 -2.7279593781061666 0.24669133655866901 -0.25976583904390171 -0.37162329428117163 -0.013459578292748547 -2.3286660767127452 -0.071338209081603085 0.020184285724869751 1.14252431754686];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.04;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
