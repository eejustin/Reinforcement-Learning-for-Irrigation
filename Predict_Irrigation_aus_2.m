function [Y,Xf,Af] = Predict_Irrigation_aus_2(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 09-Jul-2017 02:04:30.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [515;515;0;0.026000001];
x1_step1.gain = [0.0152671755725191;0.0152671755725191;2;0.627549408096057];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.90793667758696495;-1.5439296524123649;-3.7955566725587802;-2.2683502003537277;-1.6753310127988741];
IW1_1 = [3.6720197570205633 -0.88452993531751778 -4.9967145478081205 0.17532050779502181;-1.6096365851505265 1.6076774652004628 2.7494057802670024 -4.1290971257687312;0.76430964223591291 -8.9549428787145899 -2.2611739130102344 5.3464393914878148;-5.942254645085649 5.9854278772927145 -0.35007635451080893 -1.3065282403074789;-2.176381962148088 2.1795851141553704 2.9025376872040964 -4.602335660678202];

% Layer 2
b2 = -0.26461129024796848;
LW2_1 = [0.80096290747648613 5.6496958255627963 0.037032536474610557 0.76472382346704915 -4.8462861638974557];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.04;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
