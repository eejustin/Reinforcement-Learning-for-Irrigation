function [Y,Xf,Af] = Predict_WCL(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Jul-2017 18:43:44.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [519;0;0.035;0];
x1_step1.gain = [0.0125;0.0242424242424242;0.349895035897908;0.04];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.74787788894389573;-8.8811379339328518;2.9279800886177356;-0.35965994973029369;0.24002105470398899;-3.3188747246942376;-0.58959070358371024;3.3595723544906928;0.15153920205963456;3.0861128386486163];
IW1_1 = [1.9882383468488649 0.063328564562902021 3.3453297385651974 0.4206681423121974;-1.1816571680608159 2.4739198755402731 -6.3671401135220496 -3.2915909403166146;-1.6814716284278142 2.9387352790745651 4.0958308541372173 -2.7534497945456415;-1.3678463882167284 -0.52168575965697717 4.0788220413405352 -2.4039433181599197;0.17258452984606076 2.6004671994975799 0.35335669757281812 -1.1039904579436266;-3.1752131933419849 1.8615037131519403 -2.792819428219901 -1.6493504640478571;-5.2656443119769198 0.45537373072964399 1.08393024867912 3.7577945693864123;1.2768770807699934 3.6273075663635841 -0.87547071680883737 0.039925729808701516;0.25600803635477015 0.095130567880194208 0.017667740531811058 0.082298549146507263;2.7168349373145833 0.80207847367076879 -1.8172754277252277 -0.53007255477123094];

% Layer 2
b2 = 0.19987888630441991;
LW2_1 = [-0.0097349262215852463 0.18856516204377266 -0.1485630909467977 0.16655809120278425 -0.032141796376336663 0.027339817895626443 0.018883521340416619 0.09196848884928327 3.5847290550365396 0.048390175844366029];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0125;
y1_step1.xoffset = 519;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
