function [Y,Xf,Af] = myNeuralNetworkFunction_2(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 04-Jul-2017 18:54:52.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [519;0;0;0];
x1_step1.gain = [0.0125;0.0242424242424242;0.347765610335442;0.04];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.4035409483053387;-1.2544735904633222;-6.2135675071826855;-6.3574011232653298;1.9089019058696426;-2.308610266014695;1.242490807872987;3.4405932430954396;-2.3737483690342018;0.76242968420512913;-0.40770724595448832;-2.9945389423658333;0.28868255147408278;11.3606002174224;-2.4111755228259364;-1.608888641310128;3.5775935236536309;3.2746691105618599;-0.73943119835990168;1.5302568417888522];
IW1_1 = [-0.34959156925910895 1.35267473003016 -3.5511917056075455 1.3412065634667429;-0.53059815469259974 2.7574553761712748 0.14796634610698123 -1.7631275554959098;-0.37564089572231446 -5.3788833824922184 -1.7827745614691575 0.21635408964980818;4.0957846938268609 -5.2617669432608167 -0.61185640353987947 2.5570165574175174;-0.41688950548580861 -2.8230345866756421 -4.054844425556297 0.54167592395116271;1.2007870498759925 1.2016941153300011 0.73706513882394364 2.8448902615608342;-2.1525225338923231 -0.67588387691463614 -1.5956067860664416 -2.5512255486450854;0.47791525303665888 3.2460625955681603 1.9334452439929712 -0.28215697291398029;0.20172873940611011 -2.9886016887920639 0.56995699829776147 1.5643173110237298;-0.60965460676314365 -2.2032161373639472 -1.921674765103718 -0.24230215012034018;3.1746961351749099 -0.51056228454206998 -2.1051481917129435 -2.131454573973095;-0.39218936038704294 -1.246315387043192 -3.3378536655775912 0.39102055957401544;1.3010921720564836 -2.1507358313130727 0.13406793954289747 -3.0645734837297733;0.58272807363511248 10.254616718015363 1.9417648392922868 -0.16762629331495726;-1.5860166032057699 2.96499086035737 0.84015777072984499 2.1886382014020631;3.9564306953286072 -2.3604019406193464 2.1221593710841495 -3.6220630159973988;6.4613591060496178 -1.0694089378922593 0.88086798606247951 -0.23839491756251968;4.198752694711037 -0.37827133039670668 0.86116529060243785 0.12514021923716667;-0.50709871898169301 0.63847835427034338 0.89786430760158531 -0.53253538361101049;2.2215320476765417 -1.5695863159959897 1.5026652024439926 0.18225171962608208];

% Layer 2
b2 = 0.96182618883371018;
LW2_1 = [-0.49687501176100113 2.4241664453430576 6.5874782974448811 0.24057370957108268 -0.90361006502767593 0.39658995311133149 0.050086053409191471 2.2930775860855142 -0.35293059383239184 2.0559265629972341 -0.088813052870897885 -0.715996271601818 0.24470766702562757 3.6515495637565185 1.1592356759015907 0.11318595749227459 0.75529995723675625 -1.8658453600670064 -2.436345998710769 1.6886630370847495];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0125;
y1_step1.xoffset = 519;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
